<!DOCTYPE html>
<html>
<head>
    <meta charset=utf-8 />
    <title>Pandemic</title>
    <link rel="stylesheet" type="text/css" media="screen" href="css/main.css" />
    <script type="text/javascript" src="js/third-party/jquery-2.0.0.min.js"></script>
    <script type="text/javascript" src="js/third-party/seedrandom.min.js"></script>
    <script type="text/javascript" src="js/third-party/three.min.js"></script>
    <script type="text/javascript" src="js/third-party/tween.min.js"></script>
    <script type="text/javascript" src="js/third-party/hqx.min.js"></script>
    <script type="text/javascript" src="js/DataPoint.js"></script>
    <script type="text/javascript" src="js/Renderer.js"></script>
    <script type="text/javascript" src="js/UserInterface.js"></script>
    <script type="text/javascript" src="js/Simulator.js"></script>
</head>
<body>
    <div id="container" style="display: none;"></div>
    <div id="ui"><div id="ui_mask"></div></div>

    <script>
        var UI,R,S,seed,gData,gConfig;

        $(function() {
            R = Renderer();
            UI = UserInterface(R);

            var d = new Date();
            seed = d.getTime();


            UI.init(function() {
                UI.load.start();
                tGenerator.postMessage({
                    seed: seed,
                    tx_w: 720
                });
            });
        });

        var tGenerator = new Worker('js/Generator.js');
        var tCompletion = 0;
        tGenerator.addEventListener('message', function(event) {
            var data = event.data;
            switch (data.cmd) {
                case 'progress':
                    if(!data.progress)
                        UI.load.progress();
                    else
                        UI.load.progress(data.progress,data.share);
                    break;
                case 'ready':
                    gConfig = data.config;
                    console.time('webWorkerTransferTimer');
                    break;
                case 'data':
                    gData = {points: data.points, countries: data.countries};
                    // Re-reference the adjacent points
                    for(i = 0, n = gData.points.length; i < n; i++) {
                        gData.points[i].adjacent[0] = gData.points[gData.points[i].adjacent[0]];
                        gData.points[i].adjacent[1] = gData.points[gData.points[i].adjacent[1]];
                        gData.points[i].adjacent[2] = gData.points[gData.points[i].adjacent[2]];
                        gData.points[i].adjacent[3] = gData.points[gData.points[i].adjacent[3]];
                        gData.points[i].__proto__ = DataPoint.prototype;
                    }
                    UI.load.endGenerator();
                    S = new Simulator(['main'],R,UI);
                    S.setName(data.generatedName);
                    tCompletion++;
                    gStart(tCompletion);
                    break;
                case 'texture':
                    R.init(data.texture);
                    tCompletion++;
                    gStart(tCompletion);
                    break;
                case 'complete':
                    tCompletion++;
                    gStart(tCompletion);
                    break;
            }
        }, false);
        
        function gStart(completeSteps) {
            if(completeSteps == 3) {
                // Function also initializes UI.
                UI.setSimulator(S);
                tGenerator.terminate();
                delete tGenerator;
                console.timeEnd('webWorkerTransferTimer')

                S.start('main');
                UI.load.end();
                R.animate();                
            }
        }
    </script>
</body>
</html>