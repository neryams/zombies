<!DOCTYPE html>
<html>
<head>
    <meta charset=utf-8 />
    <title>Pandemic</title>
    <link rel="stylesheet" type="text/css" media="screen" href="css/main.css" />
    <script src="js/third-party/jquery-2.0.0.min.js"></script>
    <script src="js/third-party/i18next-1.6.3.min.js"></script>
    <script src="js/third-party/seedrandom.min.js"></script>
    <script src="js/third-party/three.min.js"></script>
    <script src="js/third-party/tween.min.js"></script>
    <script src="js/third-party/hqx.min.js"></script>
    <script src="js/DataPoint.js"></script>
    <script src="js/Renderer.js"></script>
    <script src="js/UserInterface.js"></script>
    <script src="js/Simulator.js"></script>
</head>
<body>
    <div id="setup">
        <h2>Zombies</h2>
        <form action="#" method="GET">
            <span data-i18n="labels.texturesize"></span><select name="texture_size" id="s_tx">
                <option data-i18n="texturesizes.low" value="360"></option>
                <option data-i18n="texturesizes.medium" value="720" selected></option>
                <option data-i18n="texturesizes.high" value="1440"></option>
                <option data-i18n="texturesizes.ultra" value="2160"></option>
            </select><br />
            <span data-i18n="labels.seed"></span><input type="text" name="seed" id="s_seed" /><br />
            <span data-i18n="labels.models">Modules: </span><input type="text" name="modules" id="s_modules" value="main,panic,worldStats,gridBoost,population,climate,seaports,vaccine,bite,viralInfect,movement" /><br />
            <span data-i18n="labels.language">Language: </span><select name="language" id="s_lng">
                <option value="en">English</option>
                <option value="jp">日本語</option>
            </select><br />
            <input data-i18n="[value]labels.start" type="submit" value="" />
        </form>
    </div>
    <div id="container" style="display: none;"></div>
    <div id="ui" style="display: none;"><div id="ui_mask"></div></div>

    <script>
        var UI,R,S,seed,gData,gConfig,debug;

        /* Debug Commands
            debug.watchPoint : int, id of the point that you want to be printed to console when it is affected in the simulator
            debug.mouseOverDebugData : set to true to display lots of data about a point when visualizations are enabled
        */
        debug = {
            watchPoint: false,
            logModules: false,
            mouseOverDebugData: false
        };

        $(function () {
            $.i18n.init({ resGetPath: 'locales/__lng__/__ns__.json', lng: 'en', load: 'unspecific', ns: 'setup', fallbackLng: 'en', debug: true, useCookie: false }, function() {
                $("#setup").i18n();
            });

            $('#s_lng').change(function () {
                $("form :input").attr("disabled", true);
                $.i18n.setLng( $(this).val(), function() {
                    $("#setup").i18n();
                    $("form :input").attr("disabled", false);
                });
            });

            $('form').on('submit', function (event) {
                event.preventDefault();

                var userConfig = {
                    seed: $('#s_seed').val(),
                    tx_w: $('#s_tx').val(),
                    language: $('#s_lng').val()
                }

                $.i18n.loadNamespaces(['ui', 'messages', 'dom'], function() { 
                    $.i18n.setDefaultNamespace('messages');
                    var ns_loaded = true;
                });

                $.getScript('js/loadModules.php?modules='+$('#s_modules').val(), function () {
                    $("#setup").remove();

                    R = Renderer();
                    UI = UserInterface(R);

                    UI.init(function() {
                        UI.load.start();
                        tGenerator.postMessage(userConfig);
                    });
                });
                return false;
            });
        });

        var tGenerator = new Worker('js/Generator.js');
        var tCompletion = 0;
        tGenerator.addEventListener('message', function(event) {
            var data = event.data;
            switch (data.cmd) {
                case 'progress':
                    if(!data.progress)
                        UI.load.progress();
                    else
                        UI.load.progress(data.progress,data.share);
                    break;
                case 'ready':
                    gConfig = data.config;
                    console.time('webWorkerTransferTimer');
                    break;
                case 'data':
                    gData = {points: data.points, countries: data.countries};
                    // Re-reference the adjacent points
                    for(i = 0, n = gData.points.length; i < n; i++) {
                        gData.points[i].adjacent[0] = gData.points[gData.points[i].adjacent[0]];
                        gData.points[i].adjacent[1] = gData.points[gData.points[i].adjacent[1]];
                        gData.points[i].adjacent[2] = gData.points[gData.points[i].adjacent[2]];
                        gData.points[i].adjacent[3] = gData.points[gData.points[i].adjacent[3]];
                        gData.points[i].__proto__ = DataPoint.prototype;
                    }
                    UI.load.endGenerator();
                    S = new Simulator(['main'],R,UI);
                    S.setName(data.generatedName);
                    tCompletion++;
                    gStart(tCompletion);
                    break;
                case 'texture':
                    R.init(data.texture);
                    tCompletion++;
                    gStart(tCompletion);
                    break;
                case 'complete':
                    tCompletion++;
                    gStart(tCompletion);
                    break;
            }
        }, false);
        
        function gStart(completeSteps) {
            if(completeSteps == 3) {
                // Function also initializes UI.
                UI.setSimulator(S);
                tGenerator.terminate();
                delete tGenerator;
                console.timeEnd('webWorkerTransferTimer')

                S.start('main');
                UI.load.end();
                R.animate();                
            }
        }
    </script>
</body>
</html>